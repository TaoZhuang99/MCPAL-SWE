% =========================================================================
% - Calculate the radiation from a circular PAL using the spherical 
%   wave expansion (SWE) method
% - 'is_focus' = true for a circular focusing PAL
% - Dimension: fp.theta -> fp.r -> l -> m -> n -> Gauss
% - Modified based on PAL_SWE_220201A.m
% -------------------------------------------------------------------------
% REFERENCES
% - Zhong2020:
%   - J. Zhong, R. Kirby, and X. Qiu, ''A spherical expansion for audio 
%       sounds generated by a circular parametric array loudspeaker,'' 
%       J. Acoust. Soc. Am. 147, 3502–3510 (2020). 
% - Zhong2021:
%   - J. Zhong, R. Kirby, and X. Qiu, ''The near field, Westervelt far 
%       field, and inverse-law far field of the audio sound generated 
%       by parametric array loudspeakers,'' J. Acoust. Soc. Am. 149, 
%       1524–1535 (2021).
% -------------------------------------------------------------------------
% INPUT
%   a       --- radius
%   fp      --- coordinates of field points
%   ultra   --- ultra sound: ultra.low, ultra.high
% =========================================================================
function prs = PalCircSrc_SWE(a, ultra, audio, fp, varargin)

    validateattributes(fp.theta, {'numeric'}, {'column', '>=', 0, '<=', pi});
    validateattributes(fp.r, {'numeric'}, {'row', '>=', 0});

    % todo: eliminate this condition
    % if ~isequal(fp.r, sort(fp.r))
        % error('The elements in fp.r must be in correct order!!\n');
    % end
    validateattributes(fp.r, {'numeric'}, {'>=', 0, 'nondecreasing', 'size', [1,nan]});
    validateattributes(fp.theta, {'numeric'}, {'size', [nan,1]});
    
	ip = inputParser;
	% the number of truncated terms
	ip.addParameter('truncated_terms', 30, @(x)validateattributes(x, {'numeric'}, {'>', 0, 'scalar'}));
    % the governing equation to be used 
	ip.addParameter('eqn', 'Westervelt', @(x)any(validatestring(x, {'Westervelt', 'WesterveltCorrection', 'Kuznetsov'})));
    % if the PAL is focusing
	ip.addParameter('is_focus', false, @(x)validateattributes(x, {'logical'}, {'scalar'}));
    % Focal length
	ip.addParameter('focal_len', nan, @(x)validateattributes(x, {'numeric'}, {'scalar', '>=', 0}));
	parse(ip, varargin{:});
	ip = ip.Results;

    % spherical modes
	lmn = (0:ip.truncated_terms).';
	l = reshape(lmn, 1, 1, ip.truncated_terms+1);
	m = reshape(lmn, 1, 1, 1, ip.truncated_terms+1);
	n = reshape(lmn, 1, 1, 1, 1, ip.truncated_terms+1);

	% see Eq. (13) of Zhong2020JASA
	C_l = (-1).^l .* (4*l+1) / sqrt(pi) .* exp(gammaln(l+1/2) - gammaln(l+1));
	C_m = (-1).^m .* (4*m+1) / sqrt(pi) .* exp(gammaln(m+1/2) - gammaln(m+1));

	% Wigner 3j symbol. see Eq. (20) of Zhong2020JASA
	wigner = 0*l.*m.*n;
	for i_l = 1:length(l)
		for j_m = 1:length(m)
			for k_n = 1:length(n)
				wigner(1, 1, i_l, j_m, k_n) = Wigner3j000(...
                    2*l(i_l), 2*m(j_m), 2*n(k_n));
			end
		end
	end
	W_lmn = (4*n+1) .* wigner.^2;

	% Legendre polynomials in Eq. (21) of Zhong2020JASA
    leg_2n = permute( ...
        LegendrePolynomial_211130B(...
        2 * max(n), ...
        cos(permute(fp.theta, [5,2,3,4,1]))), ...
        [5,2,3,4,1]);
    leg_2n = leg_2n(:,:,:,:,1:2:end);

	%% Calculate the radial componentns
    % the points in interior region
    fp.r_interior = fp.r(fp.r<a);
    % the points in exterior region
    fp.r_exterior = fp.r(fp.r>=a);
    % Radial components 
    radial.p = []; radial.r = []; radial.theta = [];
    if ~isempty(fp.r_interior)
        % fprintf('============Interior region============\n')
        % fprintf('Processing the interior region points...\n')

        radial_interior = PAL_SWE_RadialHybrid_220202A(...
            a, ...
            ultra, audio, ...
            fp.r_interior, l, m, n, ...
            'eqn', ip.eqn, ...
            'region', 'interior', ...
            'is_focus', ip.is_focus,...
            'focal_len', ip.focal_len);
        radial.p = [radial.p, radial_interior.p];
        radial.r = [radial.r, radial_interior.r];
        radial.theta = [radial.theta, radial_interior.theta];
    end

    if ~isempty(fp.r_exterior)
        % fprintf('============Exterior region============\n')
        % fprintf('Processing the exterior region points...\n')
        radial_exterior = PAL_SWE_RadialHybrid_220202A(...
            a, ....
            ultra, audio,...
            fp.r_exterior, l, m, n, ...
            'eqn', ip.eqn, ...
            'region', 'exterior', ...
            'is_focus', ip.is_focus,...
            'focal_len', ip.focal_len);
        radial.p = [radial.p, radial_exterior.p];
        radial.r = [radial.r, radial_exterior.r];
        radial.theta = [radial.theta, radial_exterior.theta];
    end

	%% Calculate the velocity potentials
    % See Eq. (21) in Zhong2020
	C_lmn = - 1./ audio.angfreq .* C_l .* C_m .* W_lmn;
	potential_p = sum(sum(sum(C_lmn .* radial.p, 4), 3) .* leg_2n, 5);
    NONLINER_COEF = 1.2;
	switch ip.eqn
        % Westervelt equation
		case 'Westervelt'
			potential = potential_p * NONLINER_COEF;
			prs = 1i * 1.21 * audio.angfreq .* potential;   

        % Westervelt equation with an algebraic correction
		case 'WesterveltCorrection'
			potential = potential_p * NONLINER_COEF;
			prs = 1i * 1.21 * audio.angfreq .* potential;   

            [prs_low, vel_r_low, vel_theta_low] = ...
                CircSrc_SWE_220303A(...
                ultra.low.num, ...
                a, ...
                fp.r, ...
                fp.theta, ...
                'is_cal_velocity', true, ...
                'max_order', 2e2,...
                'is_focus', ip.is_focus,...
                'focal_len', ip.focal_len);
            [prs_high, vel_r_high, vel_theta_high] = ...
                CircSrc_SWE_220303A(...
                ultra.high.num, ...
                a, ...
                fp.r, ...
                fp.theta, ...
                'is_cal_velocity', true, ...
                'max_order', 2e2,...
                'is_focus', ip.is_focus,...
                'focal_len', ip.focal_len);

            % modifications of the Lagrangian density
			lag = 1.21/2 .* (vel_r_high .* conj(vel_r_low) ...
                + vel_theta_high .* conj(vel_theta_low)) ...
				- (ultra.low.freq / ultra.high.freq ...
                + ultra.high.freq / ultra.low.freq - 1) ...
                ./(2*1.21*343^2) .* (prs_high .* conj(prs_low));
            prs = prs - lag;

        % Kuznetsov equation
		case 'Kuznetsov'
			potential_r = sum(sum(sum(C_lmn .* radial.r, 4), 3) .* leg_2n, 5);
			potential_theta = sum(sum(sum(C_lmn .* radial.theta...
				.* (l.*(2*l+1) + m.*(2*m+1) - n.*(2*n+1)), 4), 3) ...
				.* leg_2n, 5);
			potential = potential_p .* (NONLINER_COEF-1) ...
				+ potential_r + potential_theta;
			
            [prs_low, vel_r_low, vel_theta_low] ...
                = CircSrc_SWE_220303A(...
                ultra.low.num, ...
                a, ...
                fp.r, ...
                fp.theta, ...
                'is_cal_velocity', true, ...
                'max_order', 2e2,...
                'is_focus', ip.is_focus,...
                'focal_len', ip.focal_len);
            [prs_high, vel_r_high, vel_theta_high] = ...
                CircSrc_SWE_220303A(...
                ultra.high.num, ...
                a, ...
                fp.r, ...
                fp.theta, ...
                'is_cal_velocity', true, ...
                'max_order', 2e2,...
                'is_focus', ip.is_focus,...
                'focal_len', ip.focal_len);

            % modifications of the Lagrangian density
			lag = 1.21/2 .* (vel_r_high .* conj(vel_r_low) ...
                + vel_theta_high .* conj(vel_theta_low)) ...
				- 1./(2*1.21*343^2) .* (prs_high .* conj(prs_low));
			prs = 1i*1.21*audio.angfreq .* potential - lag;
	end
end
